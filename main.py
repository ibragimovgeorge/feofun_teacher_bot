import logging
import random
import os
from dotenv import load_dotenv
import atexit
import schedule
from threading import Thread
from time import sleep

from config import types_of_questions, periods_themes, amount_of_periods
import users_handler
import postgres_handler
import questions_handler
from telegram import (
    Poll,
    Update,
    InputMediaPhoto,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Updater,
    CommandHandler,
    PollHandler,
    MessageHandler,
    CallbackQueryHandler,
    Filters,
    CallbackContext, PicklePersistence,
)

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
global connection
global users_dict
global hints
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
my_father_id, my_mother_id, bot_token, monuments_csv_url = int(os.environ.get('my_father_id')), int(os.environ.get('my_mother_id')), os.environ.get('bot_token'), os.environ.get('monuments_csv_url')

# –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
def setup_data():
    logging_file = os.path.join(os.getenv('HOME'), 'test.log')
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s : %(levelname)s : %(message)s',
        filename=logging_file,
        filemode='w',
    )
    logging.disable(logging.DEBUG)

    global users_dict
    users_dict = users_handler.update_users_from_db()
    global hints
    hints = questions_handler.update_questions_from_db()

    logging.info("–¥–∞—Ç–∞ –∞–ø–¥–µ–π—Ç–µ–¥ —Å–∞–∫—Å–µ—Å—Å—Ñ—É–ª–ª–∏, –±–æ—Ç —Å—Ç–∞—Ä—Ç–µ–¥")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –Ω—É–∂–Ω—ã –ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—Å–ª–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
def start(update: Update, context: CallbackContext) -> None:
    logging.info("start with user " + update.effective_chat.full_name + " with id " + str(update.effective_chat.id))
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω—É–∂–Ω—ã!", callback_data="hints_required"),
            InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã!", callback_data="hints_unrequired"),
        ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º, "
                              "–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –∫—É–ª—å—Ç—É—Ä—ã —Å–∞–º–∏ –≤–∞–º –∑–∞–ø–æ–º–Ω—è—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                              "–Ω—É–∂–Ω—ã –ª–∏ –≤–∞–º –ø–æ–¥—Å–∫–∞–∑–∫–∏, –≤—ã–≤–æ–¥–∏–º—ã–µ –ø–æ—Å–ª–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                              reply_markup=reply_markup)


# –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –º–µ–Ω—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤)
def stat(update: Update, context: CallbackContext) -> None:
    if users_dict[update.effective_chat.id].amount_of_answers < 100:
        context.bot.send_message(update.effective_chat.id,
                                 f'–í–µ–ª–∏–∫ —Ç—Ä—É–¥ —Ç–≤–æ–π, –∏ –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ –∑–∞—Å–ª—É–≥–∞–º, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {users_dict[update.effective_chat.id].amount_of_answers} '
                                 f'–≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {sum(users_dict[update.effective_chat.id].last_stat)}!')

    else:
        context.bot.send_message(update.effective_chat.id,
                                 f'–í–µ–ª–∏–∫ —Ç—Ä—É–¥ —Ç–≤–æ–π, –∏ –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ –∑–∞—Å–ª—É–≥–∞–º, –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 '
                                 f'–≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {sum(users_dict[update.effective_chat.id].last_stat)}')


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
def helper(update: Update, context: CallbackContext) -> None:
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text="–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏ –∑–Ω–∞–Ω–∏—è –ø—Ä–∏–¥—É—Ç –∫ –≤–∞–º. –ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª "
                                  "–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ /start. –ï—Å–ª–∏ –Ω–∞–¥–æ–µ–ª–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ "
                                  "—Ö–æ—Ç–∏—Ç–µ –Ω–æ–≤—ã—Ö, —Ç–æ–∂–µ –Ω–∞–∂–º–∏—Ç–µ /start. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏, "
                                  "—Ç–æ–∂–µ –Ω–∞–∂–º–∏—Ç–µ /start. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç—â–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Ç–µ–º—É, "
                                  "–Ω–∞–∂–º–∏—Ç–µ /set_periods –∏–ª–∏ /set_themes")


# —Ä–∞–∑ –≤ —á–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —é–∑–µ—Ä–æ–≤ –≤ –±–¥
def scheduler():
    schedule.every().hour.do(users_handler.save_users_to_db, users_dict)
    while True:
        schedule.run_pending()
        sleep(3600)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def unknown(update: Update, context: CallbackContext) -> None:
    if update.effective_chat.id in [my_father_id, my_mother_id]:
        if update.effective_message.text == '/save_users_data':
            users_handler.save_users_to_db(users_dict)
            context.bot.send_message(chat_id=update.effective_chat.id, text="—Å–æ—Ö—Ä–∞–Ω–∏–ª —é–∑–µ—Ä–æ–≤ –≤ –±–¥")
        elif update.effective_message.text == '/update_questions':
            questions_handler.update_questions_from_db()
            context.bot.send_message(chat_id=update.effective_chat.id, text="–∞–ø–¥–µ–π—Ç–∏–ª –∫—É–µ—Å—Ç–∏–æ–Ω—Å —Å–∞–∫—Å–µ—Å—Å—Ñ—É–ª–∏")
        elif update.effective_message.text == '/update_questions_from_csv':
            postgres_handler.update_questions_from_csv(monuments_csv_url, update.effective_chat.id, context)
            context.bot.send_message(chat_id=update.effective_chat.id, text="–∑–∞–ø–∏–ª–∏–ª –∏–¥ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –±–∞–∑—É, —É—Å–ø–µ—à–Ω–æ –∞–ø–¥–µ–π—Ç–∏–ª –≤—Å–µ –º–æ–Ω—É–º–µ–Ω—Ç—ã")
        elif update.effective_message.text == '/logs':
            context.bot.send_document(chat_id=update.effective_chat.id, document=open(os.path.join(os.getenv('HOME'), 'test.log')))
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–∞–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º —è –Ω–µ –ø–æ–¥—á–∏–Ω—è—é—Å—åüñï")


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞, —Å–∞–º–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤ payload —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–∞–º—è—Ç–Ω–∏–∫
def send_question(effective_chat_id, type_question, question, answers, num_right_answer, num_right_monument,
                  context: CallbackContext) -> None:
    logging.info("send_question")
    questions_predefined_text = ('', '', '', '', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–∫—Ç', '–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', ('1', '2', '3', '4'), ('1', '2', '3', '4'), ('1', '2', '3', '4'),
                                 ('1', '2', '3', '4'))

    if type_question in types_of_questions['text_to_text']:
        message = context.bot.send_poll(
            chat_id=effective_chat_id, question=question, options=answers, type=Poll.QUIZ,
            correct_option_id=num_right_answer, is_anonymous=True
        )
        payload = {
            message.poll.id: {"chat_id": effective_chat_id, "message_id": message.message_id,
                              "type_question": type_question, "num_right_monument": num_right_monument}
        }
        context.bot_data.update(payload)

    elif type_question in types_of_questions['picture_to_text']:
        context.bot.send_photo(chat_id=effective_chat_id,
                               photo=question)

        message = context.bot.send_poll(
            chat_id=effective_chat_id, question=questions_predefined_text[type_question], options=answers,
            type=Poll.QUIZ,
            correct_option_id=num_right_answer, is_anonymous=True
        )
        payload = {
            message.poll.id: {"chat_id": effective_chat_id, "message_id": message.message_id,
                              "type_question": type_question, "num_right_monument": num_right_monument}
        }
        context.bot_data.update(payload)

    elif type_question in types_of_questions['text_to_pictures']:
        context.bot.send_media_group(chat_id=effective_chat_id, media=[
            InputMediaPhoto(answers[0]),
            InputMediaPhoto(answers[1]),
            InputMediaPhoto(answers[2]),
            InputMediaPhoto(answers[3])
        ])
        message = context.bot.send_poll(
            chat_id=effective_chat_id, question=question, options=questions_predefined_text[type_question],
            type=Poll.QUIZ,
            correct_option_id=num_right_answer, is_anonymous=True
        )
        payload = {
            message.poll.id: {"chat_id": effective_chat_id, "message_id": message.message_id,
                              "type_question": type_question, "num_right_monument": num_right_monument}
        }
        context.bot_data.update(payload)


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ send_question
def new_quiz(effective_chat_id, context: CallbackContext):
    logging.info("new_quiz")
    type_question, question, answers, num_right_answer, num_right_monument = questions_handler.generate_question(
        period=users_dict[effective_chat_id].periods,
        theme=users_dict[effective_chat_id].themes,
    )
    send_question(effective_chat_id, type_question, question, answers, num_right_answer, num_right_monument, context)


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —á–∏—Å–ª–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ send_question
def old_quiz(effective_chat_id, context: CallbackContext):
    logging.info("old_quiz")
    type_question, question, answers, num_right_answer, num_right_monument = questions_handler.generate_question(
        period=users_dict[effective_chat_id].periods,
        theme=users_dict[effective_chat_id].themes,
        num_right_monument=users_dict[effective_chat_id].wrong_answers[0][1],
        type_question=users_dict[effective_chat_id].wrong_answers[0][0]
    )
    users_dict[effective_chat_id].wrong_answers.pop(0)
    send_question(effective_chat_id, type_question, question, answers, num_right_answer, num_right_monument, context)


# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
def repeat_wrong(update: Update, context: CallbackContext) -> None:
    if users_dict[update.effective_chat.id].is_on_wrong_answers_sequence:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–Ø —É–∂–µ –∑–∞–¥–∞—é –≤–∞–º —Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    elif len(users_dict[update.effective_chat.id].wrong_answers) == 0:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å")
    else:
        users_dict[update.effective_chat.id].is_on_wrong_answers_sequence = True
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–î–∞–ª–µ–µ –ø–æ–π–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–∞–Ω–µ–µ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏ –±—É–¥—É—Ç –∏–¥—Ç–∏, "
                                      "–ø–æ–∫–∞ –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ")
        old_quiz(update.effective_chat.id, context)


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏
# –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, —Ç–∞–∫ –∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —é–∑–µ—Ä–æ–≤ –≤ old_quiz –∏ new_quiz –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
def receive_quiz_answer(update: Update, context: CallbackContext) -> None:
    logging.info("receive_quiz_answer")
    # the bot can receive closed poll updates we don't care about
    if update.poll.is_closed:
        return
    if update.poll.total_voter_count == 1:
        try:
            quiz_data = context.bot_data[update.poll.id]
        # this means this poll answer update is from an old poll, we can't stop it then
        except KeyError:
            return
        context.bot.stop_poll(quiz_data["chat_id"], quiz_data["message_id"])
        users_dict[quiz_data["chat_id"]].amount_of_answers += 1
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        answers = [update.poll.options[0].voter_count, update.poll.options[1].voter_count,
                   update.poll.options[2].voter_count, update.poll.options[3].voter_count]
        if update.poll.correct_option_id == answers.index(1):  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            users_dict[quiz_data["chat_id"]].last_stat.pop(0)
            users_dict[quiz_data["chat_id"]].last_stat.append(1)
            next_question(quiz_data["chat_id"], context)
        else:  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            users_dict[quiz_data["chat_id"]].last_stat.pop(0)
            users_dict[quiz_data["chat_id"]].last_stat.append(0)
            users_dict[quiz_data["chat_id"]].wrong_answers.append(
                [quiz_data["type_question"], quiz_data["num_right_monument"]])
            if users_dict[quiz_data["chat_id"]].if_hints_required:
                keyboard = [
                    [
                        InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")
                    ]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                #–ø–æ—Å—ã–ª–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —Å —Ñ–æ—Ç–æ –æ –ø–∞–º—è—Ç–Ω–∏–∫–µ –∏–∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                context.bot.send_photo(chat_id=quiz_data["chat_id"],
                                       caption=hints[quiz_data["num_right_monument"]][1],
                                       photo=hints[quiz_data["num_right_monument"]][0],
                                       reply_markup=reply_markup)
            else:
                next_question(quiz_data["chat_id"], context)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
def next_question(effective_chat_id, context: CallbackContext):
    if users_dict[effective_chat_id].is_on_wrong_answers_sequence:
        if len(users_dict[effective_chat_id].wrong_answers) == 0:
            context.bot.send_message(chat_id=effective_chat_id,
                                     text="–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ –æ—Ç–≤–µ—á–∞–ª–∏ "
                                          "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–Ω—ã–Ω–µ –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            users_dict[effective_chat_id].is_on_wrong_answers_sequence = False
            new_quiz(effective_chat_id, context)
        else:
            old_quiz(effective_chat_id, context)
    else:
        new_quiz(effective_chat_id, context)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–æ–∫, –µ—Å–ª–∏ —é–∑–µ—Ä –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ—Ç –µ–≥–æ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é,
# –∞ —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ (–Ω–æ –Ω–µ —Å–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã)
# –∞ –µ—â—ë –∑–∞–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏)
def buttons_handler(update: Update, context: CallbackContext) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    query.answer()
    if query.data == "next_question":
        query.edit_message_caption(
            caption=update.effective_message.caption)
        next_question(update.effective_chat.id, context)
    elif query.data == "hints_unrequired":
        query.edit_message_text(
            text="–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º, –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ "
                 "–ø–∞–º—è—Ç–Ω–∏–∫–∏ –∫—É–ª—å—Ç—É—Ä—ã —Å–∞–º–∏ –≤–∞–º –∑–∞–ø–æ–º–Ω—è—Ç—Å—è. –ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–∫–ª—é—á–∏–ª. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç—â–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å "
                 "–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Ç–µ–º—É, –Ω–∞–∂–º–∏—Ç–µ /set_periods –∏–ª–∏ /set_themes")
        if update.effective_chat.id not in users_dict:
            users_dict[update.effective_chat.id] = users_handler.register_user(update.effective_chat.id,
                                                                               update.effective_chat.full_name, False)
        users_dict[update.effective_chat.id].is_on_wrong_answers_sequence = False
        users_dict[update.effective_chat.id].if_hints_required = False
        new_quiz(update.effective_chat.id, context)
    elif query.data == "hints_required":
        query.edit_message_text(
            text="–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º, –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ "
                 "–ø–∞–º—è—Ç–Ω–∏–∫–∏ –∫—É–ª—å—Ç—É—Ä—ã —Å–∞–º–∏ –≤–∞–º –∑–∞–ø–æ–º–Ω—è—Ç—Å—è. –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–∫–ª—é—á–∏–ª. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç—â–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å "
                 "–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Ç–µ–º—É, –Ω–∞–∂–º–∏—Ç–µ /set_periods –∏–ª–∏ /set_themes")
        if update.effective_chat.id not in users_dict:
            users_dict[update.effective_chat.id] = users_handler.register_user(update.effective_chat.id,
                                                                               update.effective_chat.full_name, True)
        users_dict[update.effective_chat.id].is_on_wrong_answers_sequence = False
        users_dict[update.effective_chat.id].if_hints_required = True
        new_quiz(update.effective_chat.id, context)
    elif query.data in list(periods_themes)[0:amount_of_periods]:
        users_dict[update.effective_chat.id].periods = query.data
        query.edit_message_text(
            text="–¢–µ–ø–µ—Ä—å –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ {} {}".format(
                periods_themes[users_dict[update.effective_chat.id].themes][1],
                periods_themes[users_dict[update.effective_chat.id].periods][1]))
        next_question(update.effective_chat.id, context)
    elif query.data in list(periods_themes)[amount_of_periods:]:
        users_dict[update.effective_chat.id].themes = query.data
        query.edit_message_text(
            text="–¢–µ–ø–µ—Ä—å –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ {} {}".format(
                periods_themes[users_dict[update.effective_chat.id].themes][1],
                periods_themes[users_dict[update.effective_chat.id].periods][1]))
        next_question(update.effective_chat.id, context)


def set_periods(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton(periods_themes[i][0], callback_data=i)] for i in list(periods_themes)[0:amount_of_periods] if (questions_handler.amount_of_monuments_in_period_theme_more_than_4(i, users_dict[update.effective_chat.id].themes))
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ:",
                              reply_markup=reply_markup)


def set_themes(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton(periods_themes[i][0], callback_data=i)] for i in list(periods_themes)[amount_of_periods:] if (questions_handler.amount_of_monuments_in_period_theme_more_than_4(users_dict[update.effective_chat.id].periods, i))
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ —Ç–µ–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ—Ä –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ:",
                              reply_markup=reply_markup)

def downloader(update: Update, context: CallbackContext) -> None:
    if update.effective_chat.id in [my_father_id, my_mother_id]:
        postgres_handler.update_questions_from_csv(context.bot.get_file(update.message.document).download(), update.effective_chat.id, context)

def get_picture_id(url: str, chat_id, context, name)->str:
    try:
        return context.bot.send_photo(chat_id=chat_id, photo=url).photo[-1].file_id
    except Exception as e:
        return context.bot.send_message(chat_id=chat_id, text='–æ–¥–Ω–∞ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –±–æ–ª–µ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ, –∑–∞–º–µ–Ω–∏—Ç–µ —É—Ä–ª –≤ —Ñ–∞–π–ª–µ, –∏–º—è –ø–∞–º—è—Ç–Ω–∏–∫–∞ ' + name)

def main() -> None:
    setup_data()
    #my_persistence = PicklePersistence(filepath='my_file')
    """Run bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater(bot_token)#.persistence(persistence=my_persistence)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CallbackQueryHandler(buttons_handler))
    dispatcher.add_handler(PollHandler(receive_quiz_answer))
    dispatcher.add_handler(CommandHandler('help', helper))
    dispatcher.add_handler(CommandHandler('stat', stat))
    dispatcher.add_handler(CommandHandler('repeat_wrong', repeat_wrong))
    dispatcher.add_handler(CommandHandler('set_periods', set_periods))
    dispatcher.add_handler(CommandHandler('set_themes', set_themes))
    dispatcher.add_handler(MessageHandler(Filters.command, unknown))
    dispatcher.add_handler(MessageHandler(Filters.document, downloader))
    # Start the Bot
    updater.start_polling()
    random.seed()
    t = Thread(target=scheduler)
    t.start()


if __name__ == "__main__":
    main()


# –Ω–∞ –≤—ã—Ö–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
@atexit.register
def goodbye():
    users_handler.save_users_to_db(users_dict)
    #postgres_handler.save_bot_data(context.bot_data, context.user_data, context.chat_data)
    postgres_handler.close_connection()
    logging.info("–ë–æ—Ç –∑–∞–∫—Ä—ã—Ç")
